#!/usr/bin/env python3
"""
🔒 Secure Setup Script for DJ AI System
Sets up environment variables securely without exposing API keys
"""

import os
import sys
from pathlib import Path
import getpass

def create_secure_env():
    """Create .env file securely"""
    print("🔒 Secure DJ AI System Setup")
    print("=" * 40)

    env_file = Path(".env")

    if env_file.exists():
        response = input("⚠️  .env file already exists. Overwrite? (y/N): ")
        if response.lower() != 'y':
            print("Setup cancelled.")
            return False

    print("\n🔑 Please enter your OpenRouter API key:")
    print("   (Get yours at: https://openrouter.ai)")
    print("   (Input will be hidden for security)")

    api_key = getpass.getpass("OpenRouter API Key: ")

    if not api_key or not api_key.startswith('sk-or-v1-'):
        print("❌ Invalid API key format. Must start with 'sk-or-v1-'")
        return False

    # Optional settings
    print("\n⚙️  Optional settings (press Enter for defaults):")
    music_path = input(f"Music library path [{os.path.expanduser('~/Music')}]: ").strip()
    if not music_path:
        music_path = os.path.expanduser('~/Music')

    venue = input("Default venue [club]: ").strip() or "club"
    event = input("Default event [prime_time]: ").strip() or "prime_time"
    duration = input("Default duration [60]: ").strip() or "60"

    # Create .env content
    env_content = f"""# DJ AI System - Environment Variables
# NEVER commit this file to GitHub!

# OpenRouter API Key
OPENROUTER_API_KEY={api_key}

# Music Library Path
MUSIC_PATH={music_path}

# DJ AI Configuration
DJ_DEFAULT_VENUE={venue}
DJ_DEFAULT_EVENT={event}
DJ_DEFAULT_DURATION={duration}

# Generated by secure setup script
"""

    try:
        with open(env_file, 'w') as f:
            f.write(env_content)

        # Set file permissions (Unix/macOS only)
        if os.name == 'posix':
            os.chmod(env_file, 0o600)  # Read/write for owner only

        print("\n✅ .env file created successfully!")
        print("🔒 File permissions set to owner-only access")
        print(f"📁 Created: {env_file.absolute()}")

        # Verify .gitignore
        gitignore = Path(".gitignore")
        if gitignore.exists():
            with open(gitignore, 'r') as f:
                content = f.read()
                if '.env' in content:
                    print("✅ .env is already in .gitignore - protected from Git")
                else:
                    print("⚠️  Adding .env to .gitignore for security")
                    with open(gitignore, 'a') as f:
                        f.write("\n# Environment variables\n.env\n")

        return True

    except Exception as e:
        print(f"❌ Error creating .env file: {e}")
        return False

def test_configuration():
    """Test the configuration"""
    print("\n🧪 Testing configuration...")

    try:
        from config import get_config, check_system_requirements

        config = get_config()
        if config.openrouter_api_key:
            print("✅ API key loaded successfully")
        else:
            print("❌ API key not loaded")
            return False

        status = check_system_requirements()
        if status['api_key']:
            print("✅ System requirements check passed")
        else:
            print("❌ System requirements check failed")
            return False

        print("✅ Configuration test passed!")
        return True

    except Exception as e:
        print(f"❌ Configuration test failed: {e}")
        return False

def main():
    """Main setup function"""
    print("🎧 DJ AI System - Secure Setup")
    print("🔒 This setup ensures your API keys are never exposed to Git")
    print()

    if create_secure_env():
        if test_configuration():
            print("\n🎉 Setup completed successfully!")
            print("\n🚀 You can now run:")
            print("   python autonomous_dj_launcher.py --venue club --duration 60")
            print("\n🔒 Security Notes:")
            print("   • Your API key is stored in .env (not tracked by Git)")
            print("   • File permissions are set to owner-only")
            print("   • Never share or commit the .env file")
        else:
            print("\n⚠️  Setup completed but configuration test failed")
            print("   Please check your API key and try again")
    else:
        print("\n❌ Setup failed. Please try again.")
        sys.exit(1)

if __name__ == "__main__":
    main()